-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
DO $$
DECLARE
  v_sqlstate text;
  v_message text;
  v_context text;
BEGIN

-- create enums
RAISE NOTICE '1. Create types';
CREATE TYPE engine_type AS ENUM('diesel', 'gasoline', 'gas', 'electric', 'lng', 'h2');

-- [DEPRICATED]
-- CREATE TYPE reviewed_cars_status AS ENUM('selected', 'estimated', 'bought', 'rejected');

CREATE TYPE carpool_car_status AS ENUM('bought', 'wait', 'maintenance', 'sale', 'reserved', 'sold');


-- create domains
RAISE NOTICE '2. Create domains';
CREATE EXTENSION citext;

CREATE DOMAIN email AS citext
	CHECK ( value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );
	
CREATE DOMAIN phone_number AS TEXT 
	CHECK( VALUE ~ '^\+\d{1,3}\s|-(\d{1,3})?\s(\d{2,3}-)*\d{4}$');
	
CREATE DOMAIN url AS text
	CHECK (VALUE ~ '^https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,}$');

-- create schemas
RAISE NOTICE '3. Create schemas';
CREATE SCHEMA IF NOT EXISTS hr;
COMMENT ON SCHEMA hr IS 'The schema for HR domain';

CREATE SCHEMA IF NOT EXISTS finance;
COMMENT ON SCHEMA hr IS 'The schema for finance department';

CREATE SCHEMA IF NOT EXISTS operations;
COMMENT ON SCHEMA hr IS 'The schema for storing operations logs';

CREATE SCHEMA IF NOT EXISTS sales;
COMMENT ON SCHEMA hr IS 'The schema for storing all business logic of the salon';

CREATE SCHEMA IF NOT EXISTS public;

-- create tables
RAISE NOTICE '4. Create tables';
RAISE NOTICE '4.1. HR schema';
CREATE TABLE IF NOT EXISTS hr.employees
(
    id smallserial NOT NULL,
    first_name character varying(20) NOT NULL,
    last_name character varying(40) NOT NULL,
    salary_cent integer NOT NULL CHECK(salary_cent > 0),
    position_id smallint NOT NULL,
    is_active boolean NOT NULL DEFAULT TRUE,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

ALTER TABLE IF EXISTS hr.employees
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS hr.employees
    FORCE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS hr.positions
(
    id smallserial NOT NULL,
    name character varying(40) NOT NULL UNIQUE,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

RAISE NOTICE '4.2. Operations schema';
CREATE TABLE IF NOT EXISTS operations.operations
(
    id bigserial NOT NULL,
    employee_id INT NOT NULL,
    type_id smallint NOT NULL,
    timelog timestamp(0) with time zone NOT NULL DEFAULT NOW(),
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS operations.operations_type
(
    id smallserial NOT NULL UNIQUE,
    name character varying(40) NOT NULL UNIQUE,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

-- [ DEPRICATED]
/*
CREATE TABLE IF NOT EXISTS finance.contracts
(
    id serial NOT NULL,
    employee_id SMALLINT NOT NULL,
    client_id smallint NOT NULL,
    car_id integer NOT NULL,
    profit integer CHECK(profit > 0),
    loss integer CHECK(loss > 0),
    revenue integer,
    date timestamp(0) with time zone NOT NULL DEFAULT NOW()
)
WITH (
    OIDS = FALSE
);
*/

RAISE NOTICE '4.3. Finance schema';
CREATE TABLE IF NOT EXISTS finance.contracts
(
    id serial NOT NULL,
    employee_id SMALLINT NOT NULL,
    client_id INT NOT NULL,
    car_id integer NOT NULL,
    profit integer,
    date timestamp(0) with time zone NOT NULL DEFAULT NOW()
)
WITH (
    OIDS = FALSE
);

ALTER TABLE IF EXISTS finance.contracts
    ENABLE ROW LEVEL SECURITY;

ALTER TABLE IF EXISTS finance.contracts
    FORCE ROW LEVEL SECURITY;


RAISE NOTICE '4.4. Sales schema';
CREATE TABLE IF NOT EXISTS sales.clients
(
    id serial NOT NULL,
    first_name character varying(20) NOT NULL,
    last_name character varying(40) NOT NULL,
    phone phone_number NOT NULL UNIQUE,
    email email UNIQUE,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.services
(
    id smallserial NOT NULL UNIQUE,
    name character varying(40) NOT NULL UNIQUE,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.clients_services
(
    clients_id integer NOT NULL,
    services_id smallint NOT NULL,
	count_num smallint NOT NULL DEFAULT 1,
	PRIMARY KEY (clients_id, services_id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.car_market
(
    id serial NOT NULL,
    client_id INT NOT NULL,
    car_type_id smallint NOT NULL,
    description jsonb,
    photo_folder url UNIQUE,
    price_cents bigint NOT NULL CHECK(price_cents is NULL OR price_cents > 0),
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.car_types
(
    id serial NOT NULL,
    brand character varying(40) NOT NULL CHECK (lower(brand) = brand),
    model character varying(40) NOT NULL CHECK (lower(model) = model),
    engine_type engine_type NOT NULL,
    PRIMARY KEY (id),
	UNIQUE(brand, model, engine_type)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.reviewed_cars
(
    car_id integer NOT NULL,
    employee_id SMALLINT NOT NULL,
    estimated_cost_cent integer CHECK(estimated_cost_cent IS NULL OR estimated_cost_cent > 0),
    estimated_price_cent integer CHECK(estimated_price_cent IS NULL OR estimated_price_cent > 0),
    estimated_profit_cent integer,
    status_id smallint NOT NULL,
    PRIMARY KEY (car_id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS sales.carpool
(
    car_id integer NOT NULL,
    employee_id SMALLINT NOT NULL,
    description jsonb,
    photo_folder url,
    purchase_price_cent integer NOT NULL CHECK(purchase_price_cent > 0),
    service_cost_cent integer CHECK(service_cost_cent IS NULL OR service_cost_cent >= 0),
    price_cent integer CHECK(price_cent IS NULL OR price_cent > 0),
    status carpool_car_status NOT NULL DEFAULT 'bought',
    service_car_id integer,
    PRIMARY KEY (car_id)
)
WITH (
    OIDS = FALSE
);
COMMENT ON TABLE sales.carpool IS 'service_car_id - external key from service station';

CREATE TABLE IF NOT EXISTS sales.test_drive
(
    id serial NOT NULL,
    car_id integer NOT NULL,
    employee_id SMALLINT,
    client_id INT,
    start_time timestamp(0) with time zone NOT NULL,
    end_time timestamp(0) with time zone CHECK(end_time > start_time),
    duration_mins smallint,
    PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);


RAISE NOTICE '5. Alter tables';
ALTER TABLE IF EXISTS hr.employees
    ADD CONSTRAINT map_positions FOREIGN KEY (position_id)
    REFERENCES hr.positions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_positions
    ON hr.employees(position_id);


ALTER TABLE IF EXISTS operations.operations
    ADD CONSTRAINT map_operations_type FOREIGN KEY (type_id)
    REFERENCES operations.operations_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_operations_type
    ON operations.operations(type_id);


ALTER TABLE IF EXISTS operations.operations
    ADD CONSTRAINT map_employee FOREIGN KEY (employee_id)
    REFERENCES hr.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_employee
    ON operations.operations(employee_id);



ALTER TABLE IF EXISTS finance.contracts
    ADD CONSTRAINT map_clients FOREIGN KEY (client_id)
    REFERENCES sales.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_clients_contracts_clients
    ON finance.contracts(client_id);


ALTER TABLE IF EXISTS finance.contracts
    ADD CONSTRAINT map_employees FOREIGN KEY (employee_id)
    REFERENCES hr.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_employees
    ON finance.contracts(employee_id);


ALTER TABLE IF EXISTS sales.clients_services
    ADD FOREIGN KEY (clients_id)
    REFERENCES sales.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS sales.clients_services
    ADD FOREIGN KEY (services_id)
    REFERENCES sales.services (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS sales.car_market
    ADD CONSTRAINT map_clients FOREIGN KEY (client_id)
    REFERENCES sales.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_car_market_clients
    ON sales.car_market(client_id);


ALTER TABLE IF EXISTS sales.car_market
    ADD CONSTRAINT map_car_types FOREIGN KEY (car_type_id)
    REFERENCES sales.car_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_car_types
    ON sales.car_market(car_type_id);


ALTER TABLE IF EXISTS sales.reviewed_cars
    ADD CONSTRAINT map_car FOREIGN KEY (car_id)
    REFERENCES sales.car_market (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_car_reviewed_market
    ON sales.reviewed_cars(car_id);
	
	
ALTER TABLE IF EXISTS sales.reviewed_cars
    ADD CONSTRAINT map_status FOREIGN KEY (status_id)
    REFERENCES operations.operations_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_status
    ON sales.reviewed_cars(status_id);


ALTER TABLE IF EXISTS sales.carpool
    ADD CONSTRAINT map_car FOREIGN KEY (car_id)
    REFERENCES sales.reviewed_cars (car_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_car_carpool_reviewed
    ON sales.carpool(car_id);


ALTER TABLE IF EXISTS sales.carpool
    ADD CONSTRAINT map_employee FOREIGN KEY (employee_id)
    REFERENCES hr.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_employee
    ON sales.carpool(employee_id);


ALTER TABLE IF EXISTS sales.test_drive
    ADD CONSTRAINT map_car FOREIGN KEY (car_id)
    REFERENCES sales.carpool (car_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_car_test_drive_carpool
    ON sales.test_drive(car_id);


ALTER TABLE IF EXISTS sales.test_drive
    ADD CONSTRAINT map_employees FOREIGN KEY (employee_id)
    REFERENCES hr.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_employees
    ON sales.test_drive(employee_id);


ALTER TABLE IF EXISTS sales.test_drive
    ADD CONSTRAINT map_clients FOREIGN KEY (client_id)
    REFERENCES sales.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_map_clients_test_drive_clients
    ON sales.test_drive(client_id);

EXCEPTION
	WHEN others THEN
	GET STACKED DIAGNOSTICS v_sqlstate = returned_sqlstate,
							v_message = message_text,
							v_context = pg_exception_context;
	RAISE NOTICE E'\nRollback is made\n	SQL state: %\n	Message: %\n	Context: %', v_sqlstate, v_message, v_context;
END; $$


-- X. Additional commands
-- Set sequence
/*
CREATE SEQUENCE sales.services_id_seq MINVALUE 1;
ALTER TABLE sales.services ALTER id SET DEFAULT nextval('sales.services_id_seq');
ALTER SEQUENCE sales.services_id_seq OWNED BY sales.services.id;
*/